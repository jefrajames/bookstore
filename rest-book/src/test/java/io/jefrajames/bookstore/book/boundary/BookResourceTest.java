// Copyright 2021 jefrajames
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
package io.jefrajames.bookstore.book.boundary;

import static io.restassured.RestAssured.given;
import static javax.ws.rs.core.Response.Status.CREATED;
import static javax.ws.rs.core.Response.Status.OK;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.math.BigDecimal;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.List;

import javax.ws.rs.core.HttpHeaders;
import javax.ws.rs.core.MediaType;

import org.hamcrest.core.Is;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Order;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestMethodOrder;

import io.jefrajames.bookstore.book.entity.Book;
import io.quarkus.test.junit.QuarkusTest;
import io.restassured.common.mapper.TypeRef;
import lombok.extern.java.Log;

@QuarkusTest
@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
@Log
public class BookResourceTest {

    private static final String DEFAULT_TITLE = "Title";
    private static final String UPDATED_TITLE = "Title (updated)";
    private static final String DEFAULT_AUTHOR = "Author";
    private static final String UPDATED_AUTHOR = "Author (updated)";
    private static final Integer DEFAULT_YEAR_OF_PUBLICATION = 1111;
    private static final Integer UPDATED_YEAR_OF_PUBLICATION = 2222;
    private static final Integer DEFAULT_NB_OF_PAGES = 111;
    private static final Integer UPDATED_NB_OF_PAGES = 222;
    private static final Integer DEFAULT_RANK = 1;
    private static final Integer UPDATED_RANK = 2;
    private static final BigDecimal DEFAULT_PRICE = new BigDecimal(11.0);
    private static final BigDecimal UPDATED_PRICE = new BigDecimal(22.0);
    private static final URL DEFAULT_SMALL_IMAGE_URL = makeUrl("http://www.url.com");
    private static final URL UPDATED_SMALL_IMAGE_URL = makeUrl(
            "http://www.updatedurl.com");
    private static final URL DEFAULT_MEDIUM_IMAGE_URL = makeUrl("http://www.url.com");
    private static final URL UPDATED_MEDIUM_IMAGE_URL = makeUrl(
            "http://www.updatedurl.com");
    private static final String DEFAULT_DESCRIPTION = "Description";
    private static final String UPDATED_DESCRIPTION = "Description (updated)";
    // Mocking numbers that should be generated by the Number microservice 
    public static final String MOCK_ISBN_10 = "Isbn 10";
    public static final String MOCK_ISBN_13 = "Isbn 13";

    private static URL makeUrl(String urlString) {
        try {
            return new URL(urlString);
        } catch (MalformedURLException e) {
            return null;
        }
    }

    private static int nbBooks;
    private static String bookId;

    @Test
    @Order(1)
    void shouldGetInitialItems() {
        List<Book> books = given()
                .when()
                .get("/api/books")
                .then()
                .statusCode(OK.getStatusCode()).header(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON)
                .extract()
                .body()
                .as(getBookTypeRef());
        nbBooks = books.size();
    }

    private TypeRef<List<Book>> getBookTypeRef() {
        return new TypeRef<List<Book>>() {
        };
    }

    @Test
    @Order(2)
    void shouldAddAnItem() {
        Book book = new Book();
        book.title = DEFAULT_TITLE;
        book.author = DEFAULT_AUTHOR;
        book.yearOfPublication = DEFAULT_YEAR_OF_PUBLICATION;
        book.nbOfPages = DEFAULT_NB_OF_PAGES;
        book.rank = DEFAULT_RANK;
        book.price = DEFAULT_PRICE;
        book.smallImageUrl = DEFAULT_SMALL_IMAGE_URL;
        book.mediumImageUrl = DEFAULT_MEDIUM_IMAGE_URL;
        book.description = DEFAULT_DESCRIPTION;
        // Not mentioned in the doc page 86
        book.isbn10 = MOCK_ISBN_10;
        book.isbn13 = MOCK_ISBN_13;

        // Persists a new book
        String location
                = given()
                        .body(book)
                        .header(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON)
                        .header(HttpHeaders.ACCEPT, MediaType.APPLICATION_JSON).when()
                        .post("/api/books").then()
                        .statusCode(CREATED.getStatusCode())
                        .extract()
                        .header("Location");
        log.info("location=" + location);
        // Extracts the Location and stores the book id
        assertTrue(location.contains("/api/books"));
        String[] segments = location.split("/");
        bookId = segments[segments.length - 1];
        assertNotNull(bookId);
        log.info("bookId=" + bookId);

        // Checks the book has been created
        given()
                .pathParam("id", bookId)
                .when()
                .get("/api/books/{id}")
                .then()
                .statusCode(OK.getStatusCode())
                .header(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON)
                .body("title", Is.is(DEFAULT_TITLE))
                .body("isbn13", Is.is(MOCK_ISBN_13))
                .body("isbn10", Is.is(MOCK_ISBN_10))
                .body("author", Is.is(DEFAULT_AUTHOR))
                .body("yearOfPublication", Is.is(DEFAULT_YEAR_OF_PUBLICATION))
                .body("nbOfPages", Is.is(DEFAULT_NB_OF_PAGES))
                .body("rank", Is.is(DEFAULT_RANK))
                .body("smallImageUrl", Is.is(DEFAULT_SMALL_IMAGE_URL.toString()))
                .body("mediumImageUrl", Is.is(DEFAULT_MEDIUM_IMAGE_URL.toString()))
                .body("description", Is.is(DEFAULT_DESCRIPTION));

        // Checks there is an extra book in the database
        List<Book> books = given()
                .when()
                  .get("/api/books")
                .then()
                  .statusCode(OK.getStatusCode())
                  .header(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON)
                  .extract()
                  .body()
                  .as(getBookTypeRef());

        assertEquals(nbBooks + 1, books.size());

    }

}
